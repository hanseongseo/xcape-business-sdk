pipeline {
    agent any

    environment {
        AWS_CREDENTIALS_ID = 'XCAPE_DEV_AWS_CREDENTIALS'
        AWS_ECR_URL = credentials('AWS_ECR_URL_XCAPE_DEV_ADMIN')
        JASYPT_KEY = credentials('XCAPE_JASYPT_KEY')
        AWS_REGION = credentials('AWS_REGION')
        COMMIT_HASH = ''
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    // Git Clone
                    git url: 'https://github.com/hanseongseo/xcape-business-sdk.git', branch: 'develop'
                }
            }
        }

        stage('Prepare') {
            steps {
                script {
                    // 커밋 해시값 가져오기 및 환경 변수로 설정
                    COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.COMMIT_HASH = COMMIT_HASH
                }

                // firebase account 특정 경로로 복사
                withCredentials([file(credentialsId: 'FIREBASE_ACCOUNT_KEY_DEV', variable: 'FIREBASE_ACCOUNT_KEY')]) {
                    sh "cp $FIREBASE_ACCOUNT_KEY xcape-admin/src/main/resources"
                }
            }
        }

        stage('Login to ECR') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "${AWS_CREDENTIALS_ID}" // AWS 자격 증명의 ID
                ]]) {
                    script {
                        sh '''
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_URL
                        '''
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    // Docker 이미지를 빌드하고 두 개의 태그 추가
                    sh """
                    docker build --build-arg JASYPT_KEY=${JASYPT_KEY} -t ${AWS_ECR_URL}:latest -t ${AWS_ECR_URL}:${COMMIT_HASH} -f xcape-admin/Dockerfile .
                    """
                }
            }
        }

        stage('ECR에 빌드한 이미지 업로드') {
            steps {
                script {
                    // Docker 이미지를 ECR에 푸시 (latest와 커밋 해시 태그)
                    sh """
                    docker push ${AWS_ECR_URL}:latest
                    docker push ${AWS_ECR_URL}:${COMMIT_HASH}
                    """
                }
            }
        }

        stage('Docker Container 실행') {
            steps {
                script {
                    // Docker 컨테이너 실행 (latest와 커밋 해시 태그 중 하나 선택 가능)
                    sh """
                    docker run -d -p 8000:8000 ${AWS_ECR_URL}:latest
                    """
                }
            }
        }
    }
    post {
        success {
            echo 'Build success'
        }
        failure {
            echo 'Build Failed'
        }
        always {
            cleanWs()
        }
    }
}